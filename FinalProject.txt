'''
Final Project

Stock Market Strategy
Code Credit: Week 7 Zoom session
https://www.geeksforgeeks.org/python-os-path-exists-method/ to search for checking if file exists
https://www.journaldev.com/23470/python-string-replace to read and use replace()
https://alpaca.markets/learn/algorithmic-trading-python-alpaca/ - how to use alpaca api



Annelise Rasmussen

'''
import json
import requests
import time
import os
import alpaca_trade_api as tradeapi

BASE_URL = 'https://paper-api.alpaca.markets'
alpaca_id = 'PKZ68GBWIC8YVC8VNLKG'
alpaca_secret_key = 'Z38BHfifLhH1LPowoxk2FAKa2Icpp3d8greXbEWP'

api = tradeapi.REST(key_id=alpaca_id, secret_key=alpaca_secret_key, 
                    base_url=BASE_URL, api_version='v2')
                    
#submit orders: api.submit_order(symbol='AAPL', qty=1, side='buy', type='market', time_in_force='day')
#api.submit_order('TSLA', 1, 'sell', 'market', 'day') -short selling

def get_data(company):
    
    path = "/home/ubuntu/environment/final_project/" + company + ".csv" 
    if os.path.exists(path) == True: #check if path exists and whether to create file
        
        return
    else:
        url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol='+ company + '&outputsize=full&apikey=NG9C9EPVYBMQT0C8'
        request = requests.get(url) #creating object to store information of url
        time.sleep(12)
        stock_dict = json.loads(request.text)#load the information from url into json format
            
        key1 = "Time Series (Daily)" #create keys to search for closing prices
        key2 = "4. close"
            
        file_csv = open(company + ".csv", "w")#create a csv file of stock
            
        stock_lines = []
        
        for date in stock_dict[key1]:
            if date >= "2021-11-29":
                stock_lines.append(date + "," + stock_dict[key1][date][key2] + "\n") #writing to file
                
        stock_lines.reverse() #reverse to write to the bottom of list
            
        file_csv.writelines(stock_lines)
            
            
        file_csv.close()
        
        
        return

def append_data(company):
    
    url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=' + company + '&outputsize=full&apikey=NG9C9EPVYBMQT0C8'
    request = requests.get(url) #creating object to store information of url
    time.sleep(12)
    
    stock_dict = json.loads(request.text)#load the information from url into json format
    
    key1 = "Time Series (Daily)" #create keys to search for closing prices
    key2 = "4. close"
    
    
    file_csv = open(company + ".csv", "r")#read a csv file of stock
    file_lines = file_csv.readlines() #put lines of csv file into list
    final_date = file_lines[-1].split(",")[0] #get last date of list by splitting data and starting at the date to single out date
    
    
    stock_lines = []
    #if stock_dict[key1] > "2021-11-29":
    for date in stock_dict[key1]:
        if date >= "2021-11-29":
            if date == final_date: #dont want to append data that we already have for the date
                break
            stock_lines.append(date + "," + stock_dict[key1][date][key2] + "\n") #writing to file
        
    stock_lines.reverse() #reverse the data to add new data to end of list
    
    file_csv = open(company + ".csv", "a") #opening to append to file with new data
    file_csv.writelines(stock_lines) #append the new data
    file_csv.close()
    
    return

    

def meanReversionStrategy(prices,company): #function to calculate mean reversion strategy
    
    buy = 0
    sell = 0
    total_profit = 0
    first_buy = 0
    profit_percentage = 0
    print("Mean Reversion Strategy: " + company)
    for i in range(len(prices)):#run for as many prices are in file
        
        if i > 5:
            current_price = prices[i] # keeping track of price in the list
            avg = (prices[i - 1] + prices[i - 2] + prices[i - 3] + 
            prices[i - 4] + prices[i - 5]) / 5 #calculating the average of the moving 5 day average
            try:
                if current_price < (avg * .98) and buy == 0:# checking if you have already bought stock and if price is below average to buy stock
                    buy = current_price
                    
                    if prices[i] == prices[-1]:
                        print("You should buy this stock today.")
                        api.submit_order(company, 1,'buy','market','day')
                    if first_buy == 0: #keeping track of first_buy to calculate the return
                        first_buy = buy
                    
                elif current_price > (avg * 1.02) and buy != 0: #checking if you can sell stock and if price is higher than average *1.02
                    sell = current_price
                    total_profit += (sell-buy) #keeping track of total profit
                    buy = 0 #reset in order to buy stock again
                    if prices[i] == prices[-1]:
                        print("You should sell this stock today.")
                        api.submit_order(company, 1, 'sell', 'market', 'day')
                else: #go through until we get current price to meet if and elif statements
                    pass
            except:
                pass
    profit_percentage = (total_profit / first_buy) * 100 #calculate percent return

    return total_profit, profit_percentage


def simpleMovingAverageStrategy(prices,company): #going to update to shortsell from andy's github
    buy = 0
    sell = 0
    total_profit = 0
    first_buy = 0
    profit_percentage = 0
    position = 0
    print("Simple Moving Average Strategy: " + company)
    for i in range(len(prices)):#run for as many prices are in file
        if i > 5:
            current_price = prices[i] # keeping track of price in the list
            avg = (prices[i - 1] + prices[i - 2] + prices[i - 3] + 
            prices[i - 4] + prices[i - 5]) / 5 #calculating the average of the moving 5 day average
            try:
                if current_price > avg  and position != 1:# checking if you have already bought stock and if price is above average to buy stock
                    buy = current_price
                    if sell != 0 and buy!=0:
                        total_profit += (sell - buy)
                    if prices[i] == prices[-1]:
                        print("You should buy this stock today.")
                        api.submit_order(company, 1,'buy', 'market','day')
                    if first_buy == 0: #keeping track of first_buy to calculate the return
                        first_buy = buy
                    position = 1 #changing to long position to prevent from rebuying right after
                    
                elif current_price < avg and position != -1: #checking if you can sell stock and if price is lower than average *1.02
                    sell = current_price
                    if sell !=0 and buy != 0:
                        total_profit += (sell - buy) #keeping track of total profit
                    position = -1 #changing to short position
                    if prices[i] == prices[-1]:
                        print("You should sell this stock today.")
                        api.submit_order(company, 1, 'sell', 'market', 'day')
                   
                else: #go through until we get current price to meet if and elif statements
                     pass
            except:
                pass
    profit_percentage = (total_profit / first_buy) * 100 #calculate percent return
    
    return total_profit, profit_percentage
    
    
def bollinger_bands(prices,company):
    buy = 0
    sell = 0
    total_profit = 0
    first_buy = 0
    profit_percentage = 0
    
    print("Bollinger Bands Strategy: " + company)
    for i in range(len(prices)):#run for as many prices are in file
        if i > 5:
            current_price = prices[i] # keeping track of price in the list
            avg = (prices[i - 1] + prices[i - 2] + prices[i - 3] + 
            prices[i - 4] + prices[i - 5]) / 5 #calculating the average of the moving 5 day average
            try:
                if current_price > (avg * 1.05) and buy == 0:# checking if you have already bought stock and if price is above average to buy stock
                    buy = current_price
                    if first_buy == 0: #keeping track of first_buy to calculate the return
                        first_buy = buy
                    if prices[i] == prices[-1]:
                        print("You should buy this stock today.")
                        api.submit_order(company,1,'buy','market', 'day')
                        
                elif current_price < (avg * .95) and buy != 0: #checking if you can sell stock and if price is lower than average *1.02
                    sell = current_price
                    total_profit += (sell - buy) #keeping track of total profit
                    buy = 0 #reset in order to buy stock again
                    if prices[i] == prices[-1]:
                        print("You should sell this stock today.")
                        api.submit_order(company, 1, 'sell', 'market', 'day')
                else: #go through until we get current price to meet if and elif statements
                     pass
            except:
                pass
    profit_percentage = (total_profit / first_buy) * 100 #calculate percent return
    return total_profit, profit_percentage
    

def saveResults(results): #function to save results to json file
    json.dump(results, open("results.json", "w"), indent=4)
    
    return 


results = {} #create dictionary for json file
highest_return = 0
highest_return_sma = -9999
highest_return_mrs = -9999
highest_return_bb = -9999
most_profitable_stock = ""
most_profitable_stock_sma = ""
most_profitable_stock_mrs = ""
most_profitable_stock_bb = ""
strategy_used = ""
strategy_used_sma = ""
strategy_used_mrs = ""
strategy_used_bb = ""


stock_sma =["TSLA","SIRI","PAFO","ZM","CRWD","CRL","HZNP","GOCO","WOOF","PYPL"]
stock_mrs = ["GOOG","NFLX","META","ROKU","SBUX","AAPL","CMI","DIS","CRM","MSFT"]
stock_bb =["ADBE","BABA","INTC","COST","NYCB","AAL","LYFT","WFC","SIGA","PCG"]
for company in stock_sma: #looping through all stocks 
    
    prices = []
    
    get_data(company) #how to get data once and how to use functions
    append_data(company)
    stock = open(company + ".csv").readlines() #opening and reading file
    
    for s in stock:
        s = s.replace(" ", "")
        prices.append(round((float(s.split(",")[1])), 2)) 
    #need to go through csv file to read averages and only read the num not date
    
    
    profit, returns =  simpleMovingAverageStrategy(prices,company)
    results[company + "_sma_profit"] = round(profit, 2)
    results[company + "_sma_returns"] = round(returns, 2)  #setting values for dictionary
    if returns > highest_return_sma:#compare which company is most profitable
        highest_return_sma = returns
        strategy_used_sma = "Simple Moving Average"
        most_profitable_stock_sma = company
   
for company in stock_mrs: #looping through all stocks 
    
    prices = []
    
    get_data(company) #how to get data once and how to use functions
    append_data(company)
    stock = open(company + ".csv").readlines() #opening and reading file
    
    for s in stock:
        s = s.replace(" ", "")
        prices.append(round((float(s.split(",")[1])), 2)) 
    
    profit, returns = meanReversionStrategy(prices,company)
    results[company + "_mrs_profit"] = round(profit, 2) #setting values for dictionary 
    results[company + "_mrs_returns"] = round(returns, 2) 
    if returns > highest_return_mrs:#compare which company is most profitable
        highest_return_mrs = returns
        strategy_used_mrs = "Mean Reversion Strategy"
        most_profitable_stock_mrs = company
  
    
for company in stock_bb: #looping through all stocks 
    
    prices = []
    
    get_data(company) #how to get data once and how to use functions
    append_data(company)
    stock = open(company + ".csv").readlines() #opening and reading file
    
    for s in stock:
        s = s.replace(" ", "")
        prices.append(round((float(s.split(",")[1])), 2)) 
    profit, returns = bollinger_bands(prices,company)
    results[company + "_bb_profit"] = round(profit, 2) #setting values for dictionary 
    results[company + "_bb_returns"] = round(returns, 2)
    if returns > highest_return_bb:#compare which company is most profitable
        highest_return_bb = returns
        strategy_used_bb = "Bollinger Bands"
        most_profitable_stock_bb = company
    


if highest_return_sma > highest_return_bb and highest_return_sma > highest_return_mrs:#make a final comparison between best returns. 
    highest_return = highest_return_sma
    strategy_used =  strategy_used_sma
    most_profitable_stock = most_profitable_stock_sma
elif highest_return_mrs > highest_return_bb and highest_return_mrs > highest_return_sma:
     highest_return = highest_return_mrs
     strategy_used =  strategy_used_mrs
     most_profitable_stock = most_profitable_stock_mrs
else:
     highest_return = highest_return_bb
     strategy_used =  strategy_used_bb
     most_profitable_stock = most_profitable_stock_bb
results["Most profitable stock using " + strategy_used_sma + " was: "] = most_profitable_stock_sma   #write to JSON most profitable in each strategy
results[most_profitable_stock_sma + "'s " + "return:"] = highest_return_sma
results["Most profitable stock using " + strategy_used_mrs + " was: " ] = most_profitable_stock_mrs
results[most_profitable_stock_mrs + "'s " + "return"] = highest_return_mrs
results["Most profitable stock using " + strategy_used_bb + " was: "] = most_profitable_stock_bb
results[most_profitable_stock_bb + "'s " + "return"] = highest_return_bb

results["Most profitable stock"] = most_profitable_stock #save to json dictionary what was the most profitable stock and the results of the stock
results[most_profitable_stock + "'s " + "return"] = highest_return
results["Most profitable strategy for " + most_profitable_stock] = strategy_used
saveResults(results)

    
    
